// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'features/chat/models/message.dart';
import 'features/configuration/models/configuration.dart';
import 'features/mode_output/models/mode_output.dart';
import 'features/modes/models/mode.dart';
import 'features/tags/models/tag.dart';
import 'features/threads/models/thread.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
    id: const obx_int.IdUid(1, 743776145418585429),
    name: 'Configuration',
    lastPropertyId: const obx_int.IdUid(4, 5121334839301138866),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 6983224917835245193),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 5692197049453601596),
        name: 'apiKey',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 5084852559416521218),
        name: 'baseUrl',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 5121334839301138866),
        name: 'modelName',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(2, 6927253355368830114),
    name: 'Message',
    lastPropertyId: const obx_int.IdUid(10, 3124242428511947649),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 1728940828815448841),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 5381624335055378387),
        name: 'text',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 910260251810521971),
        name: 'timestamp',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 3680066550002636465),
        name: 'description',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 4078669316610807890),
        name: 'fileData',
        type: 27,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 3201219695819986683),
        name: 'mimeType',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 1999331805573269538),
        name: 'transcript',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 7929665902635899284),
        name: 'fileName',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(9, 7607591741458345001),
        name: 'threadId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(1, 3534214045301364872),
        relationTarget: 'Thread',
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(10, 3124242428511947649),
        name: 'type',
        type: 6,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[
      obx_int.ModelRelation(
        id: const obx_int.IdUid(1, 6641909410986852684),
        name: 'tags',
        targetId: const obx_int.IdUid(5, 7793328677636106251),
      ),
    ],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(3, 613595986337523297),
    name: 'Mode',
    lastPropertyId: const obx_int.IdUid(4, 7772031104986267899),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 5071605182056901271),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 3503765719380075858),
        name: 'name',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 7535907353507153839),
        name: 'prompt',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 7772031104986267899),
        name: 'isEditable',
        type: 1,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[
      obx_int.ModelBacklink(
        name: 'modeOutputs',
        srcEntity: 'ModeOutput',
        srcField: 'mode',
      ),
    ],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(4, 7972552485685298602),
    name: 'ModeOutput',
    lastPropertyId: const obx_int.IdUid(5, 7183552433906398861),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 8944069816848965275),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 2252469108441776858),
        name: 'createdAt',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 2288574350737718860),
        name: 'content',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 4400439456572457672),
        name: 'threadId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(2, 3624603924798944178),
        relationTarget: 'Thread',
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 7183552433906398861),
        name: 'modeId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(3, 672523359941914432),
        relationTarget: 'Mode',
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(5, 7793328677636106251),
    name: 'Tag',
    lastPropertyId: const obx_int.IdUid(4, 4058083576745247993),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 1937810705428854256),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 8091291610790441589),
        name: 'name',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 6700377495970423490),
        name: 'description',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 4058083576745247993),
        name: 'isEditable',
        type: 1,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[
      obx_int.ModelBacklink(
        name: 'messages',
        srcEntity: 'Message',
        srcField: 'tags',
      ),
    ],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(6, 4830694945051274098),
    name: 'Thread',
    lastPropertyId: const obx_int.IdUid(3, 2426728622859760878),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 3768940921716307982),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 754151564499725090),
        name: 'name',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 2426728622859760878),
        name: 'createdAt',
        type: 10,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[
      obx_int.ModelBacklink(
        name: 'messages',
        srcEntity: 'Message',
        srcField: 'thread',
      ),
      obx_int.ModelBacklink(
        name: 'modeOutputs',
        srcEntity: 'ModeOutput',
        srcField: 'thread',
      ),
    ],
  ),
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore({
  String? directory,
  int? maxDBSizeInKB,
  int? maxDataSizeInKB,
  int? fileMode,
  int? maxReaders,
  bool queriesCaseSensitiveDefault = true,
  String? macosApplicationGroup,
}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(
    getObjectBoxModel(),
    directory: directory ?? (await defaultStoreDirectory()).path,
    maxDBSizeInKB: maxDBSizeInKB,
    maxDataSizeInKB: maxDataSizeInKB,
    fileMode: fileMode,
    maxReaders: maxReaders,
    queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
    macosApplicationGroup: macosApplicationGroup,
  );
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
    entities: _entities,
    lastEntityId: const obx_int.IdUid(6, 4830694945051274098),
    lastIndexId: const obx_int.IdUid(3, 672523359941914432),
    lastRelationId: const obx_int.IdUid(1, 6641909410986852684),
    lastSequenceId: const obx_int.IdUid(0, 0),
    retiredEntityUids: const [],
    retiredIndexUids: const [],
    retiredPropertyUids: const [],
    retiredRelationUids: const [],
    modelVersion: 5,
    modelVersionParserMinimum: 5,
    version: 1,
  );

  final bindings = <Type, obx_int.EntityDefinition>{
    Configuration: obx_int.EntityDefinition<Configuration>(
      model: _entities[0],
      toOneRelations: (Configuration object) => [],
      toManyRelations: (Configuration object) => {},
      getId: (Configuration object) => object.id,
      setId: (Configuration object, int id) {
        object.id = id;
      },
      objectToFB: (Configuration object, fb.Builder fbb) {
        final apiKeyOffset = fbb.writeString(object.apiKey);
        final baseUrlOffset = object.baseUrl == null
            ? null
            : fbb.writeString(object.baseUrl!);
        final modelNameOffset = fbb.writeString(object.modelName);
        fbb.startTable(5);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, apiKeyOffset);
        fbb.addOffset(2, baseUrlOffset);
        fbb.addOffset(3, modelNameOffset);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final apiKeyParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final baseUrlParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 8);
        final modelNameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 10, '');
        final object = Configuration(
          id: idParam,
          apiKey: apiKeyParam,
          baseUrl: baseUrlParam,
          modelName: modelNameParam,
        );

        return object;
      },
    ),
    Message: obx_int.EntityDefinition<Message>(
      model: _entities[1],
      toOneRelations: (Message object) => [object.thread],
      toManyRelations: (Message object) => {
        obx_int.RelInfo<Message>.toMany(1, object.id): object.tags,
      },
      getId: (Message object) => object.id,
      setId: (Message object, int id) {
        object.id = id;
      },
      objectToFB: (Message object, fb.Builder fbb) {
        final textOffset = fbb.writeString(object.text);
        final descriptionOffset = fbb.writeString(object.description);
        final fileDataOffset = object.fileData == null
            ? null
            : fbb.writeListInt64(object.fileData!);
        final mimeTypeOffset = object.mimeType == null
            ? null
            : fbb.writeString(object.mimeType!);
        final transcriptOffset = object.transcript == null
            ? null
            : fbb.writeString(object.transcript!);
        final fileNameOffset = object.fileName == null
            ? null
            : fbb.writeString(object.fileName!);
        fbb.startTable(11);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, textOffset);
        fbb.addInt64(2, object.timestamp.millisecondsSinceEpoch);
        fbb.addOffset(3, descriptionOffset);
        fbb.addOffset(4, fileDataOffset);
        fbb.addOffset(5, mimeTypeOffset);
        fbb.addOffset(6, transcriptOffset);
        fbb.addOffset(7, fileNameOffset);
        fbb.addInt64(8, object.thread.targetId);
        fbb.addInt64(9, object.type);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final textParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final timestampParam = DateTime.fromMillisecondsSinceEpoch(
          const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0),
        );
        final typeParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          22,
          0,
        );
        final descriptionParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 10, '');
        final fileDataParam = const fb.ListReader<int>(
          fb.Int64Reader(),
          lazy: false,
        ).vTableGetNullable(buffer, rootOffset, 12);
        final mimeTypeParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 14);
        final transcriptParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 16);
        final fileNameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 18);
        final object = Message(
          id: idParam,
          text: textParam,
          timestamp: timestampParam,
          type: typeParam,
          description: descriptionParam,
          fileData: fileDataParam,
          mimeType: mimeTypeParam,
          transcript: transcriptParam,
          fileName: fileNameParam,
        );
        object.thread.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          20,
          0,
        );
        object.thread.attach(store);
        obx_int.InternalToManyAccess.setRelInfo<Message>(
          object.tags,
          store,
          obx_int.RelInfo<Message>.toMany(1, object.id),
        );
        return object;
      },
    ),
    Mode: obx_int.EntityDefinition<Mode>(
      model: _entities[2],
      toOneRelations: (Mode object) => [],
      toManyRelations: (Mode object) => {
        obx_int.RelInfo<ModeOutput>.toOneBacklink(
          5,
          object.id,
          (ModeOutput srcObject) => srcObject.mode,
        ): object.modeOutputs,
      },
      getId: (Mode object) => object.id,
      setId: (Mode object, int id) {
        object.id = id;
      },
      objectToFB: (Mode object, fb.Builder fbb) {
        final nameOffset = fbb.writeString(object.name);
        final promptOffset = fbb.writeString(object.prompt);
        fbb.startTable(5);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, nameOffset);
        fbb.addOffset(2, promptOffset);
        fbb.addBool(3, object.isEditable);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final nameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final promptParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final isEditableParam = const fb.BoolReader().vTableGet(
          buffer,
          rootOffset,
          10,
          false,
        );
        final object = Mode(
          id: idParam,
          name: nameParam,
          prompt: promptParam,
          isEditable: isEditableParam,
        );
        obx_int.InternalToManyAccess.setRelInfo<Mode>(
          object.modeOutputs,
          store,
          obx_int.RelInfo<ModeOutput>.toOneBacklink(
            5,
            object.id,
            (ModeOutput srcObject) => srcObject.mode,
          ),
        );
        return object;
      },
    ),
    ModeOutput: obx_int.EntityDefinition<ModeOutput>(
      model: _entities[3],
      toOneRelations: (ModeOutput object) => [object.thread, object.mode],
      toManyRelations: (ModeOutput object) => {},
      getId: (ModeOutput object) => object.id,
      setId: (ModeOutput object, int id) {
        object.id = id;
      },
      objectToFB: (ModeOutput object, fb.Builder fbb) {
        final contentOffset = fbb.writeString(object.content);
        fbb.startTable(6);
        fbb.addInt64(0, object.id);
        fbb.addInt64(1, object.createdAt.millisecondsSinceEpoch);
        fbb.addOffset(2, contentOffset);
        fbb.addInt64(3, object.thread.targetId);
        fbb.addInt64(4, object.mode.targetId);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final createdAtParam = DateTime.fromMillisecondsSinceEpoch(
          const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0),
        );
        final contentParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final object = ModeOutput(
          id: idParam,
          createdAt: createdAtParam,
          content: contentParam,
        );
        object.thread.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          10,
          0,
        );
        object.thread.attach(store);
        object.mode.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          12,
          0,
        );
        object.mode.attach(store);
        return object;
      },
    ),
    Tag: obx_int.EntityDefinition<Tag>(
      model: _entities[4],
      toOneRelations: (Tag object) => [],
      toManyRelations: (Tag object) => {
        obx_int.RelInfo<Message>.toManyBacklink(1, object.id): object.messages,
      },
      getId: (Tag object) => object.id,
      setId: (Tag object, int id) {
        object.id = id;
      },
      objectToFB: (Tag object, fb.Builder fbb) {
        final nameOffset = fbb.writeString(object.name);
        final descriptionOffset = fbb.writeString(object.description);
        fbb.startTable(5);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, nameOffset);
        fbb.addOffset(2, descriptionOffset);
        fbb.addBool(3, object.isEditable);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final nameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final descriptionParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final isEditableParam = const fb.BoolReader().vTableGet(
          buffer,
          rootOffset,
          10,
          false,
        );
        final object = Tag(
          id: idParam,
          name: nameParam,
          description: descriptionParam,
          isEditable: isEditableParam,
        );
        obx_int.InternalToManyAccess.setRelInfo<Tag>(
          object.messages,
          store,
          obx_int.RelInfo<Message>.toManyBacklink(1, object.id),
        );
        return object;
      },
    ),
    Thread: obx_int.EntityDefinition<Thread>(
      model: _entities[5],
      toOneRelations: (Thread object) => [],
      toManyRelations: (Thread object) => {
        obx_int.RelInfo<Message>.toOneBacklink(
          9,
          object.id,
          (Message srcObject) => srcObject.thread,
        ): object.messages,
        obx_int.RelInfo<ModeOutput>.toOneBacklink(
          4,
          object.id,
          (ModeOutput srcObject) => srcObject.thread,
        ): object.modeOutputs,
      },
      getId: (Thread object) => object.id,
      setId: (Thread object, int id) {
        object.id = id;
      },
      objectToFB: (Thread object, fb.Builder fbb) {
        final nameOffset = fbb.writeString(object.name);
        fbb.startTable(4);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, nameOffset);
        fbb.addInt64(2, object.createdAt.millisecondsSinceEpoch);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final nameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final createdAtParam = DateTime.fromMillisecondsSinceEpoch(
          const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0),
        );
        final object = Thread(
          id: idParam,
          name: nameParam,
          createdAt: createdAtParam,
        );
        obx_int.InternalToManyAccess.setRelInfo<Thread>(
          object.messages,
          store,
          obx_int.RelInfo<Message>.toOneBacklink(
            9,
            object.id,
            (Message srcObject) => srcObject.thread,
          ),
        );
        obx_int.InternalToManyAccess.setRelInfo<Thread>(
          object.modeOutputs,
          store,
          obx_int.RelInfo<ModeOutput>.toOneBacklink(
            4,
            object.id,
            (ModeOutput srcObject) => srcObject.thread,
          ),
        );
        return object;
      },
    ),
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [Configuration] entity fields to define ObjectBox queries.
class Configuration_ {
  /// See [Configuration.id].
  static final id = obx.QueryIntegerProperty<Configuration>(
    _entities[0].properties[0],
  );

  /// See [Configuration.apiKey].
  static final apiKey = obx.QueryStringProperty<Configuration>(
    _entities[0].properties[1],
  );

  /// See [Configuration.baseUrl].
  static final baseUrl = obx.QueryStringProperty<Configuration>(
    _entities[0].properties[2],
  );

  /// See [Configuration.modelName].
  static final modelName = obx.QueryStringProperty<Configuration>(
    _entities[0].properties[3],
  );
}

/// [Message] entity fields to define ObjectBox queries.
class Message_ {
  /// See [Message.id].
  static final id = obx.QueryIntegerProperty<Message>(
    _entities[1].properties[0],
  );

  /// See [Message.text].
  static final text = obx.QueryStringProperty<Message>(
    _entities[1].properties[1],
  );

  /// See [Message.timestamp].
  static final timestamp = obx.QueryDateProperty<Message>(
    _entities[1].properties[2],
  );

  /// See [Message.description].
  static final description = obx.QueryStringProperty<Message>(
    _entities[1].properties[3],
  );

  /// See [Message.fileData].
  static final fileData = obx.QueryIntegerVectorProperty<Message>(
    _entities[1].properties[4],
  );

  /// See [Message.mimeType].
  static final mimeType = obx.QueryStringProperty<Message>(
    _entities[1].properties[5],
  );

  /// See [Message.transcript].
  static final transcript = obx.QueryStringProperty<Message>(
    _entities[1].properties[6],
  );

  /// See [Message.fileName].
  static final fileName = obx.QueryStringProperty<Message>(
    _entities[1].properties[7],
  );

  /// See [Message.thread].
  static final thread = obx.QueryRelationToOne<Message, Thread>(
    _entities[1].properties[8],
  );

  /// See [Message.type].
  static final type = obx.QueryIntegerProperty<Message>(
    _entities[1].properties[9],
  );

  /// see [Message.tags]
  static final tags = obx.QueryRelationToMany<Message, Tag>(
    _entities[1].relations[0],
  );
}

/// [Mode] entity fields to define ObjectBox queries.
class Mode_ {
  /// See [Mode.id].
  static final id = obx.QueryIntegerProperty<Mode>(_entities[2].properties[0]);

  /// See [Mode.name].
  static final name = obx.QueryStringProperty<Mode>(_entities[2].properties[1]);

  /// See [Mode.prompt].
  static final prompt = obx.QueryStringProperty<Mode>(
    _entities[2].properties[2],
  );

  /// See [Mode.isEditable].
  static final isEditable = obx.QueryBooleanProperty<Mode>(
    _entities[2].properties[3],
  );

  /// see [Mode.modeOutputs]
  static final modeOutputs = obx.QueryBacklinkToMany<ModeOutput, Mode>(
    ModeOutput_.mode,
  );
}

/// [ModeOutput] entity fields to define ObjectBox queries.
class ModeOutput_ {
  /// See [ModeOutput.id].
  static final id = obx.QueryIntegerProperty<ModeOutput>(
    _entities[3].properties[0],
  );

  /// See [ModeOutput.createdAt].
  static final createdAt = obx.QueryDateProperty<ModeOutput>(
    _entities[3].properties[1],
  );

  /// See [ModeOutput.content].
  static final content = obx.QueryStringProperty<ModeOutput>(
    _entities[3].properties[2],
  );

  /// See [ModeOutput.thread].
  static final thread = obx.QueryRelationToOne<ModeOutput, Thread>(
    _entities[3].properties[3],
  );

  /// See [ModeOutput.mode].
  static final mode = obx.QueryRelationToOne<ModeOutput, Mode>(
    _entities[3].properties[4],
  );
}

/// [Tag] entity fields to define ObjectBox queries.
class Tag_ {
  /// See [Tag.id].
  static final id = obx.QueryIntegerProperty<Tag>(_entities[4].properties[0]);

  /// See [Tag.name].
  static final name = obx.QueryStringProperty<Tag>(_entities[4].properties[1]);

  /// See [Tag.description].
  static final description = obx.QueryStringProperty<Tag>(
    _entities[4].properties[2],
  );

  /// See [Tag.isEditable].
  static final isEditable = obx.QueryBooleanProperty<Tag>(
    _entities[4].properties[3],
  );
}

/// [Thread] entity fields to define ObjectBox queries.
class Thread_ {
  /// See [Thread.id].
  static final id = obx.QueryIntegerProperty<Thread>(
    _entities[5].properties[0],
  );

  /// See [Thread.name].
  static final name = obx.QueryStringProperty<Thread>(
    _entities[5].properties[1],
  );

  /// See [Thread.createdAt].
  static final createdAt = obx.QueryDateProperty<Thread>(
    _entities[5].properties[2],
  );

  /// see [Thread.messages]
  static final messages = obx.QueryBacklinkToMany<Message, Thread>(
    Message_.thread,
  );

  /// see [Thread.modeOutputs]
  static final modeOutputs = obx.QueryBacklinkToMany<ModeOutput, Thread>(
    ModeOutput_.thread,
  );
}
