/// Utilities for thread management and auto-naming
class ThreadUtils {
  /// Generate automatic thread name from content
  static String generateThreadName(String content) {
    if (content.isEmpty) return '';

    // Clean and truncate content
    final cleaned = content.trim().replaceAll(RegExp(r'\s+'), ' ');

    // Take first sentence or up to 50 characters
    final firstSentence = _getFirstSentence(cleaned);
    if (firstSentence.length <= 50) {
      return firstSentence;
    }

    // Truncate at word boundary
    return _truncateAtWordBoundary(cleaned, 50);
  }

  /// Extract first meaningful sentence from content
  static String _getFirstSentence(String content) {
    // Look for sentence endings
    final sentenceEnders = ['.', '!', '?'];

    for (final ender in sentenceEnders) {
      final index = content.indexOf(ender);
      if (index > 10 && index < 100) {
        // Reasonable sentence length
        return content.substring(0, index + 1);
      }
    }

    // If no sentence ending found, look for line breaks
    final newlineIndex = content.indexOf('\n');
    if (newlineIndex > 10 && newlineIndex < 100) {
      return content.substring(0, newlineIndex);
    }

    return content;
  }

  /// Truncate text at word boundary
  static String _truncateAtWordBoundary(String text, int maxLength) {
    if (text.length <= maxLength) return text;

    // Find last space within limit
    final truncated = text.substring(0, maxLength);
    final lastSpace = truncated.lastIndexOf(' ');

    if (lastSpace > maxLength * 0.7) {
      // Don't truncate too aggressively
      return text.substring(0, lastSpace) + '...';
    }

    return truncated + '...';
  }

  /// Generate thread name from different content types
  static String generateNameFromContentType(
      String content, String contentType) {
    switch (contentType.toLowerCase()) {
      case 'image':
        return _generateImageThreadName(content);
      case 'audio':
        return _generateAudioThreadName(content);
      case 'file':
        return _generateFileThreadName(content);
      default:
        return generateThreadName(content);
    }
  }

  static String _generateImageThreadName(String imagePath) {
    final fileName = imagePath.split('/').last.split('.').first;
    return 'Image: ${_capitalizeFirst(fileName.replaceAll(RegExp(r'[_-]'), ' '))}';
  }

  static String _generateAudioThreadName(String audioPath) {
    final fileName = audioPath.split('/').last.split('.').first;
    return 'Audio: ${_capitalizeFirst(fileName.replaceAll(RegExp(r'[_-]'), ' '))}';
  }

  static String _generateFileThreadName(String filePath) {
    final fileName = filePath.split('/').last.split('.').first;
    return 'File: ${_capitalizeFirst(fileName.replaceAll(RegExp(r'[_-]'), ' '))}';
  }

  static String _capitalizeFirst(String text) {
    if (text.isEmpty) return text;
    return text[0].toUpperCase() + text.substring(1);
  }

  /// Validate thread name
  static bool isValidThreadName(String name) {
    final cleaned = name.trim();
    return cleaned.isNotEmpty && cleaned.length <= 100;
  }

  /// Clean thread name for storage
  static String cleanThreadName(String name) {
    return name.trim().replaceAll(RegExp(r'\s+'), ' ');
  }

  /// Get display name for thread
  static String getDisplayName(String name) {
    if (name.isEmpty) return 'New conversation';
    return cleanThreadName(name);
  }

  /// Check if thread name was auto-generated
  static bool isAutoGenerated(String name) {
    // Simple heuristic: auto-generated names often end with ellipsis
    // or start with content type prefixes
    return name.endsWith('...') ||
        name.startsWith('Image:') ||
        name.startsWith('Audio:') ||
        name.startsWith('File:');
  }

  /// Sort threads by various criteria
  static List<T> sortThreads<T>(
    List<T> threads,
    String Function(T) getDate,
    String Function(T) getName,
    int Function(T) getMessageCount,
    ThreadSortOption sortBy,
  ) {
    switch (sortBy) {
      case ThreadSortOption.dateDescending:
        return [...threads]..sort((a, b) => getDate(b).compareTo(getDate(a)));
      case ThreadSortOption.dateAscending:
        return [...threads]..sort((a, b) => getDate(a).compareTo(getDate(b)));
      case ThreadSortOption.nameAscending:
        return [...threads]..sort((a, b) => getName(a).compareTo(getName(b)));
      case ThreadSortOption.nameDescending:
        return [...threads]..sort((a, b) => getName(b).compareTo(getName(a)));
      case ThreadSortOption.activityDescending:
        return [...threads]
          ..sort((a, b) => getMessageCount(b).compareTo(getMessageCount(a)));
      case ThreadSortOption.activityAscending:
        return [...threads]
          ..sort((a, b) => getMessageCount(a).compareTo(getMessageCount(b)));
    }
  }
}

enum ThreadSortOption {
  dateDescending,
  dateAscending,
  nameAscending,
  nameDescending,
  activityDescending,
  activityAscending,
}
