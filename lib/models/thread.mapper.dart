// coverage:ignore-file
// GENERATED CODE - DO NOT MODIFY BY HAND
// dart format off
// ignore_for_file: type=lint
// ignore_for_file: unused_element, unnecessary_cast, override_on_non_overriding_member
// ignore_for_file: strict_raw_type, inference_failure_on_untyped_parameter

part of 'thread.dart';

class ThreadMapper extends ClassMapperBase<Thread> {
  ThreadMapper._();

  static ThreadMapper? _instance;
  static ThreadMapper ensureInitialized() {
    if (_instance == null) {
      MapperContainer.globals.use(_instance = ThreadMapper._());
    }
    return _instance!;
  }

  @override
  final String id = 'Thread';

  static int _$id(Thread v) => v.id;
  static const Field<Thread, int> _f$id = Field(
    'id',
    _$id,
    opt: true,
    def: Isar.autoIncrement,
  );
  static String _$title(Thread v) => v.title;
  static const Field<Thread, String> _f$title = Field('title', _$title);
  static String _$autoGeneratedTitle(Thread v) => v.autoGeneratedTitle;
  static const Field<Thread, String> _f$autoGeneratedTitle = Field(
    'autoGeneratedTitle',
    _$autoGeneratedTitle,
    opt: true,
    def: '',
  );
  static String _$groupName(Thread v) => v.groupName;
  static const Field<Thread, String> _f$groupName = Field(
    'groupName',
    _$groupName,
    opt: true,
    def: 'General',
  );
  static DateTime _$createdAt(Thread v) => v.createdAt;
  static const Field<Thread, DateTime> _f$createdAt = Field(
    'createdAt',
    _$createdAt,
  );
  static DateTime _$updatedAt(Thread v) => v.updatedAt;
  static const Field<Thread, DateTime> _f$updatedAt = Field(
    'updatedAt',
    _$updatedAt,
  );
  static DateTime _$lastAccessedAt(Thread v) => v.lastAccessedAt;
  static const Field<Thread, DateTime> _f$lastAccessedAt = Field(
    'lastAccessedAt',
    _$lastAccessedAt,
  );
  static bool _$isArchived(Thread v) => v.isArchived;
  static const Field<Thread, bool> _f$isArchived = Field(
    'isArchived',
    _$isArchived,
    opt: true,
    def: false,
  );
  static bool _$isPinned(Thread v) => v.isPinned;
  static const Field<Thread, bool> _f$isPinned = Field(
    'isPinned',
    _$isPinned,
    opt: true,
    def: false,
  );
  static List<String> _$messageIds(Thread v) => v.messageIds;
  static const Field<Thread, List<String>> _f$messageIds = Field(
    'messageIds',
    _$messageIds,
    opt: true,
    def: const [],
  );
  static int _$messageCount(Thread v) => v.messageCount;
  static const Field<Thread, int> _f$messageCount = Field(
    'messageCount',
    _$messageCount,
    opt: true,
    def: 0,
  );
  static DateTime? _$lastMessageAt(Thread v) => v.lastMessageAt;
  static const Field<Thread, DateTime> _f$lastMessageAt = Field(
    'lastMessageAt',
    _$lastMessageAt,
    opt: true,
  );
  static List<String> _$tags(Thread v) => v.tags;
  static const Field<Thread, List<String>> _f$tags = Field(
    'tags',
    _$tags,
    opt: true,
    def: const [],
  );
  static String _$displayTitle(Thread v) => v.displayTitle;
  static const Field<Thread, String> _f$displayTitle = Field(
    'displayTitle',
    _$displayTitle,
    mode: FieldMode.member,
  );
  static bool _$isEmpty(Thread v) => v.isEmpty;
  static const Field<Thread, bool> _f$isEmpty = Field(
    'isEmpty',
    _$isEmpty,
    mode: FieldMode.member,
  );

  @override
  final MappableFields<Thread> fields = const {
    #id: _f$id,
    #title: _f$title,
    #autoGeneratedTitle: _f$autoGeneratedTitle,
    #groupName: _f$groupName,
    #createdAt: _f$createdAt,
    #updatedAt: _f$updatedAt,
    #lastAccessedAt: _f$lastAccessedAt,
    #isArchived: _f$isArchived,
    #isPinned: _f$isPinned,
    #messageIds: _f$messageIds,
    #messageCount: _f$messageCount,
    #lastMessageAt: _f$lastMessageAt,
    #tags: _f$tags,
    #displayTitle: _f$displayTitle,
    #isEmpty: _f$isEmpty,
  };

  static Thread _instantiate(DecodingData data) {
    return Thread(
      id: data.dec(_f$id),
      title: data.dec(_f$title),
      autoGeneratedTitle: data.dec(_f$autoGeneratedTitle),
      groupName: data.dec(_f$groupName),
      createdAt: data.dec(_f$createdAt),
      updatedAt: data.dec(_f$updatedAt),
      lastAccessedAt: data.dec(_f$lastAccessedAt),
      isArchived: data.dec(_f$isArchived),
      isPinned: data.dec(_f$isPinned),
      messageIds: data.dec(_f$messageIds),
      messageCount: data.dec(_f$messageCount),
      lastMessageAt: data.dec(_f$lastMessageAt),
      tags: data.dec(_f$tags),
    );
  }

  @override
  final Function instantiate = _instantiate;

  static Thread fromMap(Map<String, dynamic> map) {
    return ensureInitialized().decodeMap<Thread>(map);
  }

  static Thread fromJson(String json) {
    return ensureInitialized().decodeJson<Thread>(json);
  }
}

mixin ThreadMappable {
  String toJson() {
    return ThreadMapper.ensureInitialized().encodeJson<Thread>(this as Thread);
  }

  Map<String, dynamic> toMap() {
    return ThreadMapper.ensureInitialized().encodeMap<Thread>(this as Thread);
  }

  ThreadCopyWith<Thread, Thread, Thread> get copyWith =>
      _ThreadCopyWithImpl<Thread, Thread>(this as Thread, $identity, $identity);
  @override
  String toString() {
    return ThreadMapper.ensureInitialized().stringifyValue(this as Thread);
  }

  @override
  bool operator ==(Object other) {
    return ThreadMapper.ensureInitialized().equalsValue(this as Thread, other);
  }

  @override
  int get hashCode {
    return ThreadMapper.ensureInitialized().hashValue(this as Thread);
  }
}

extension ThreadValueCopy<$R, $Out> on ObjectCopyWith<$R, Thread, $Out> {
  ThreadCopyWith<$R, Thread, $Out> get $asThread =>
      $base.as((v, t, t2) => _ThreadCopyWithImpl<$R, $Out>(v, t, t2));
}

abstract class ThreadCopyWith<$R, $In extends Thread, $Out>
    implements ClassCopyWith<$R, $In, $Out> {
  ListCopyWith<$R, String, ObjectCopyWith<$R, String, String>> get messageIds;
  ListCopyWith<$R, String, ObjectCopyWith<$R, String, String>> get tags;
  $R call({
    int? id,
    String? title,
    String? autoGeneratedTitle,
    String? groupName,
    DateTime? createdAt,
    DateTime? updatedAt,
    DateTime? lastAccessedAt,
    bool? isArchived,
    bool? isPinned,
    List<String>? messageIds,
    int? messageCount,
    DateTime? lastMessageAt,
    List<String>? tags,
  });
  ThreadCopyWith<$R2, $In, $Out2> $chain<$R2, $Out2>(Then<$Out2, $R2> t);
}

class _ThreadCopyWithImpl<$R, $Out> extends ClassCopyWithBase<$R, Thread, $Out>
    implements ThreadCopyWith<$R, Thread, $Out> {
  _ThreadCopyWithImpl(super.value, super.then, super.then2);

  @override
  late final ClassMapperBase<Thread> $mapper = ThreadMapper.ensureInitialized();
  @override
  ListCopyWith<$R, String, ObjectCopyWith<$R, String, String>> get messageIds =>
      ListCopyWith(
        $value.messageIds,
        (v, t) => ObjectCopyWith(v, $identity, t),
        (v) => call(messageIds: v),
      );
  @override
  ListCopyWith<$R, String, ObjectCopyWith<$R, String, String>> get tags =>
      ListCopyWith(
        $value.tags,
        (v, t) => ObjectCopyWith(v, $identity, t),
        (v) => call(tags: v),
      );
  @override
  $R call({
    int? id,
    String? title,
    String? autoGeneratedTitle,
    String? groupName,
    DateTime? createdAt,
    DateTime? updatedAt,
    DateTime? lastAccessedAt,
    bool? isArchived,
    bool? isPinned,
    List<String>? messageIds,
    int? messageCount,
    Object? lastMessageAt = $none,
    List<String>? tags,
  }) => $apply(
    FieldCopyWithData({
      if (id != null) #id: id,
      if (title != null) #title: title,
      if (autoGeneratedTitle != null) #autoGeneratedTitle: autoGeneratedTitle,
      if (groupName != null) #groupName: groupName,
      if (createdAt != null) #createdAt: createdAt,
      if (updatedAt != null) #updatedAt: updatedAt,
      if (lastAccessedAt != null) #lastAccessedAt: lastAccessedAt,
      if (isArchived != null) #isArchived: isArchived,
      if (isPinned != null) #isPinned: isPinned,
      if (messageIds != null) #messageIds: messageIds,
      if (messageCount != null) #messageCount: messageCount,
      if (lastMessageAt != $none) #lastMessageAt: lastMessageAt,
      if (tags != null) #tags: tags,
    }),
  );
  @override
  Thread $make(CopyWithData data) => Thread(
    id: data.get(#id, or: $value.id),
    title: data.get(#title, or: $value.title),
    autoGeneratedTitle: data.get(
      #autoGeneratedTitle,
      or: $value.autoGeneratedTitle,
    ),
    groupName: data.get(#groupName, or: $value.groupName),
    createdAt: data.get(#createdAt, or: $value.createdAt),
    updatedAt: data.get(#updatedAt, or: $value.updatedAt),
    lastAccessedAt: data.get(#lastAccessedAt, or: $value.lastAccessedAt),
    isArchived: data.get(#isArchived, or: $value.isArchived),
    isPinned: data.get(#isPinned, or: $value.isPinned),
    messageIds: data.get(#messageIds, or: $value.messageIds),
    messageCount: data.get(#messageCount, or: $value.messageCount),
    lastMessageAt: data.get(#lastMessageAt, or: $value.lastMessageAt),
    tags: data.get(#tags, or: $value.tags),
  );

  @override
  ThreadCopyWith<$R2, Thread, $Out2> $chain<$R2, $Out2>(Then<$Out2, $R2> t) =>
      _ThreadCopyWithImpl<$R2, $Out2>($value, $cast, t);
}

